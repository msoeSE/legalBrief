<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.0</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

    <!-- Set this to true if you enable server-side prerendering -->
    <DockerComposeProjectPath>..\docker-compose.dcproj</DockerComposeProjectPath>
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
    <UserSecretsId>5ebedfaf-3716-43c6-b64c-fd09ccbb326d</UserSecretsId>
    <DockerComposeProjectPath>..\docker-compose.dcproj</DockerComposeProjectPath>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper" Version="6.2.2" />
    <PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="3.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.5" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="2.0.0-rc1-final" />
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="2.0.1" />
    <PackageReference Include="OpenXmlPowerTools" Version="1.0.0" />
    <PackageReference Include="AspNet.Security.OAuth.Validation" Version="2.0.0-*" />
    <PackageReference Include="OpenIddict" Version="2.0.0-rc3-0910" />
    <PackageReference Include="OpenIddict.EntityFrameworkCore" Version="2.0.0-rc3-0910" />
    <PackageReference Include="OpenIddict.Mvc" Version="2.0.0-rc3-0910" />
    <PackageReference Include="Serilog.AspNetCore" Version="2.1.1" />
    <PackageReference Include="Serilog.Sinks.Console" Version="3.1.1" />
    <PackageReference Include="Serilog.Sinks.File" Version="4.0.0" />
  </ItemGroup>

  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.1" />
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="ClientApp\src\app\auth.config.ts" />
    <None Remove="ClientApp\src\app\auth.guard.ts" />
    <None Remove="ClientApp\src\app\components\briefsList\services\pager.service.ts" />
    <None Remove="ClientApp\src\app\components\confirmation\confirmation.component.ts" />
    <None Remove="ClientApp\src\app\components\header\header.component.ts" />
    <None Remove="ClientApp\src\app\services\account.service.ts" />
  </ItemGroup>

  <ItemGroup>
    <TypeScriptCompile Include="ClientApp\src\app\auth.config.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\auth.guard.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\components\briefsList\services\pager.service.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\components\confirmation\confirmation.component.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\components\header\header.component.ts" />
    <TypeScriptCompile Include="ClientApp\src\app\services\account.service.ts" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="ClientApp\src\app\components\examples\petition\" />
    <Folder Include="ClientApp\src\app\components\examples\response\" />
    <Folder Include="ClientApp\src\app\components\finals\petition\" />
    <Folder Include="ClientApp\src\app\components\finals\response\" />
    <Folder Include="ClientApp\src\app\components\forms\petition\" />
    <Folder Include="ClientApp\src\app\components\forms\response\" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>


  <ItemGroup>
    <DotNetCliToolReference Include="Amazon.ECS.Tools" Version="1.1.0" />
  </ItemGroup>

  <ItemGroup>
    <DotNetCliToolReference Include="Amazon.ElasticBeanstalk.Tools" Version="1.1.0" />
  </ItemGroup>

  <ItemGroup>
    <None Update="initialBriefTemplate.docx">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Update="rds-combined-ca-bundle.pfx">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Update="replyBriefTemplate.docx">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>
</Project>


